import edu.wpi.first.gradlerio.deploy.roborio.RoboRIO

plugins {
    id "java"
    id "edu.wpi.first.GradleRIO" version "2025.3.1"
    id 'checkstyle'
    id 'jacoco'
    id 'org.hidetake.ssh' version "2.9.0"
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

def ROBOT_MAIN_CLASS = "competition.Main"

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project DeployUtils.
deploy {
    targets {
        roborio(getTargetTypeClass('RoboRIO')) {
            // Team number is loaded either from the .wpilib/wpilib_preferences.json
            // or from command line. If not found an exception will be thrown.
            // You can use getTeamOrDefault(team) instead of getTeamNumber if you
            // want to store a team number in this file.
            team = project.frc.getTeamNumber()
            debug = project.frc.getDebugOrDefault(false)

            artifacts {
                // First part is artifact name, 2nd is artifact type
                // getTargetTypeClass is a shortcut to get the class type using a string

                frcJava(getArtifactTypeClass('FRCJavaArtifact')) {
                }

                // Note - the commented block below has the various configuration settings needed
                // to enable VisualVM analysis.
                //frcJava(getArtifactTypeClass('FRCJavaArtifact')) {
                //    // Enable VisualVM connection
                //    jvmArgs.add("-Dcom.sun.management.jmxremote=true")
                //    jvmArgs.add("-Dcom.sun.management.jmxremote.port=1198")
                //    jvmArgs.add("-Dcom.sun.management.jmxremote.local.only=false")
                //    jvmArgs.add("-Dcom.sun.management.jmxremote.ssl=false")
                //    jvmArgs.add("-Dcom.sun.management.jmxremote.authenticate=false")
                //    jvmArgs.add("-Djava.rmi.server.hostname=172.22.11.2") // Replace TE.AM with team number
                //}

                // Note - the commented block below has the various configuration settings suggested by
                // the AdvantageKit team.
                //frcJava(getArtifactTypeClass('FRCJavaArtifact')) {
                    //jvmArgs.add("-XX:+UnlockExperimentalVMOptions")
                    //jvmArgs.add("-XX:GCTimeRatio=5")
                    //jvmArgs.add("-XX:+UseSerialGC")
                    //jvmArgs.add("-XX:MaxGCPauseMillis=50")

                    // The options below may improve performance, but should only be enabled on the RIO 2
                    //
                     //final MAX_JAVA_HEAP_SIZE_MB = 100;
                     //jvmArgs.add("-Xmx" + MAX_JAVA_HEAP_SIZE_MB + "M")
                     //jvmArgs.add("-Xms" + MAX_JAVA_HEAP_SIZE_MB + "M")
                     //jvmArgs.add("-XX:+AlwaysPreTouch")
                //}

                // Static files artifact
                frcStaticFileDeploy(getArtifactTypeClass('FileTreeArtifact')) {
                    files = project.fileTree('src/main/deploy')
                    directory = '/home/lvuser/deploy'
                }
            }
        }
    }
}

def deployArtifact = deploy.targets.roborio.artifacts.frcJava

// Set to true to use debug for JNI.
wpi.java.debugJni = false

// Set this to true to enable desktop support.
def includeDesktopSupport = false

// Maven central needed for JUnit
repositories {
    mavenCentral()
    
    maven {
        url "https://mvnrepository.com/artifact/com.google.dagger/dagger"
        url "https://mvnrepository.com/artifact/com.google.dagger/dagger-compiler"
        url = uri("https://maven.pkg.github.com/kobeeeef/XTABLES")
        credentials {
            // leave this here! it is required for gihub packages
            // any username and password would work, this one is thanks to team 6328
            // Using ours now (read-only access for XTABLES repo only)
            username = "The-Matrix-Vision"
            password = "\u0067\u0068\u0070\u005f\u004c\u006e\u0047\u0073\u0051\u0061\u0067\u0035\u0051\u004c\u006a\u0070\u0065\u0043\u0070\u0035\u0045\u0075\u0072\u0034\u0046\u004f\u0030\u0074\u0043\u004f\u0069\u006f\u0030\u006f\u0032\u0034\u0069\u007a\u0074\u0070"

        }
    }



    mavenLocal()
    
    flatDir {
       dirs 'SeriouslyCommonLib/build/libs'
   }
}

// Defining my dependencies. In this case, WPILib (+ friends), and vendor libraries.
// Also defines JUnit 4.
dependencies {
    annotationProcessor wpi.java.deps.wpilibAnnotations()
    implementation wpi.java.deps.wpilib()
    implementation wpi.java.vendor.java()

    roborioDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.roborio)
    roborioDebug wpi.java.vendor.jniDebug(wpi.platforms.roborio)

    roborioRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.roborio)
    roborioRelease wpi.java.vendor.jniRelease(wpi.platforms.roborio)

    nativeDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.desktop)
    nativeDebug wpi.java.vendor.jniDebug(wpi.platforms.desktop)
    simulationDebug wpi.sim.enableDebug()

    nativeRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.desktop)
    nativeRelease wpi.java.vendor.jniRelease(wpi.platforms.desktop)
    simulationRelease wpi.sim.enableRelease()

    testImplementation 'junit:junit:4.12'

    implementation project(':SeriouslyCommonLib')
    implementation group: 'org.json', name:'json', version: '20220924'

    implementation 'org.apache.logging.log4j:log4j-api:2.19.0'
    implementation 'org.apache.logging.log4j:log4j-core:2.19.0'

    implementation 'com.google.dagger:dagger:2.44.2'
    annotationProcessor 'com.google.dagger:dagger-compiler:2.44.2'
    testAnnotationProcessor 'com.google.dagger:dagger-compiler:2.44.2'

    testImplementation "org.mockito:mockito-core:3.+"

    // xtables
    implementation "org.kobe.xbot:xtables:5.3.0"

    def akitJson = new groovy.json.JsonSlurper().parseText(new File(projectDir.getAbsolutePath() + "/vendordeps/AdvantageKit.json").text)
    annotationProcessor "org.littletonrobotics.akit:akit-autolog:$akitJson.version"
}

wpi.sim.addGui().defaultEnabled = true
wpi.sim.addDriverstation()

jar {
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    manifest edu.wpi.first.gradlerio.GradleRIOPlugin.javaManifest(ROBOT_MAIN_CLASS)
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

// Configure jar and deploy tasks
deployArtifact.jarTask = jar
wpi.java.configureExecutableTasks(jar)
wpi.java.configureTestTasks(test)

// Configure string concat to always inline compile
tasks.withType(JavaCompile) {
    options.compilerArgs.add '-XDstringConcat=inline'
}

// Our custom gradle stuff after this line

remotes {
    rio {
        host = 'roboRIO-488-frc.local'
        user = 'admin'
        knownHosts = allowAnyHosts
    }
}

task('copyResources') {
    doLast {
        ssh.run {
            session(remotes.rio) {
                // execute 'mkdir ~/449_resources', ignoreError: true
                // execute 'mkdir /488Logs', ignoreError: true
                put from: fileTree('SeriouslyCommonLib/lib/log4jConfig/log4j.xml'), into: '/home/lvuser/'
                //execute ". /etc/profile.d/natinst-path.sh; /usr/local/frc/bin/frcKillRobot.sh -t -r", ignoreError: true
            }
        }
    }
}

checkstyle {
    toolVersion = '10.6.0'
    configFile = file('SeriouslyCommonLib/xbotcheckstyle.xml')
}

task checkstyle(type: Checkstyle) {
    source 'src/main/java'
    configProperties.basedir = file('SeriouslyCommonLib')
    
    // Empty classpath
    classpath = files()
}

test {
    reports {
        junitXml.required = true
    }               
}

// Configuration for AdvantageKit
task(replayWatch, type: JavaExec) {
    mainClass = "org.littletonrobotics.junction.ReplayWatch"
    classpath = sourceSets.main.runtimeClasspath
}

tasks.withType(Test) {
    testLogging.showStandardStreams = true
    
    afterTest { desc, result -> 
        logger.quiet "Executed test ${desc.name} [${desc.className}] with result: ${result.resultType}"
    }

    afterSuite { desc, result ->
      if (!desc.parent) { // will match the outermost suite
        logger.quiet "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
      }
    }
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, excludes: [
                    'competition/injection/components/Dagger*.class',
                    'competition/electrical_contract/*.class',
                    '**/*_Factory.class',
                    '**/*_Factory$InstanceHolder.class',
                    '**/*_Factory_Impl.class',
                    '**/*_MembersInjector.class'
            ])
        }))
    }
}

// always generate the coverage report after the tests run
test.finalizedBy { jacocoTestReport }